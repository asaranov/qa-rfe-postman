{
	"info": {
		"_postman_id": "1db30bf8-fea9-4c20-ba72-40f999facbd7",
		"name": "RFE SOAP API - smoke tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18949226"
	},
	"item": [
		{
			"name": "0. Test data preparation",
			"item": [
				{
					"name": "14.1. Token - RFE primary user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/token?username={{userEmail}}&password={{password}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"token"
							],
							"query": [
								{
									"key": "username",
									"value": "{{userEmail}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "0.1. Verify that userEmail exists and get loc/div/dep Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that user exist and validated\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"    pm.expect(jsonData.result.status).to.eql(\"Validated\");\r",
									"});\r",
									"\r",
									"postman.setEnvironmentVariable(\"departmentId\", jsonData.result.departmentId);\r",
									"postman.setEnvironmentVariable(\"divisionId\", jsonData.result.divisionId);\r",
									"postman.setEnvironmentVariable(\"locationId\", jsonData.result.locationId);\r",
									"postman.setEnvironmentVariable(\"userId\", jsonData.result.id);\r",
									"postman.setEnvironmentVariable(\"divisionName\", jsonData.result.divisionName);\r",
									"postman.setEnvironmentVariable(\"departmentName\", jsonData.result.departmentName);\r",
									"postman.setEnvironmentVariable(\"locationName\", jsonData.result.locationName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
								"key": "RFE-User-Identity",
								"value": "{{userEmail}}"
							}
						],
						"url": {
							"raw": "{{host}}/Users/{{userEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"Users",
								"{{userEmail}}"
							]
						},
						"description": "Lists user information about a specific user for the client."
					},
					"response": []
				},
				{
					"name": "0.2. Get right aliase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is at least one use exist\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.eql(\"Success\");\r",
									"    pm.expect(responseJson.result[0].aliasId).to.exist;\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"useId\", jsonData.result[0].aliasId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "RFE-User-Identity",
								"value": "{{userEmail}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}/rights/aliases",
							"host": [
								"{{host}}"
							],
							"path": [
								"rights",
								"aliases"
							]
						}
					},
					"response": []
				},
				{
					"name": "0.5. Get userGroupName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"userGroupName\", jsonData.result[0].name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
								"key": "RFE-User-Identity",
								"value": "{{userEmail}}"
							}
						],
						"url": {
							"raw": "{{host}}/Client/userGroups/:userGroupId",
							"host": [
								"{{host}}"
							],
							"path": [
								"Client",
								"userGroups",
								":userGroupId"
							],
							"variable": [
								{
									"key": "userGroupId",
									"value": "",
									"description": "(Required) "
								}
							]
						},
						"description": "Lists user group information for a specific user group in the client."
					},
					"response": []
				},
				{
					"name": "0.6. Get article details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var jsonObject = xml2Json(responseBody);\r",
									"console.log(jsonObject);\r",
									"\r",
									"//get article details\r",
									"\r",
									"//article DOI\r",
									"postman.setEnvironmentVariable(\"doi\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['DOI']);\r",
									"\r",
									"//article Title\r",
									"postman.setEnvironmentVariable(\"title\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['Title']);\r",
									"\r",
									"//article PublicationName\r",
									"postman.setEnvironmentVariable(\"publicationName\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['PublicationName']);\r",
									"\r",
									"//article Volume\r",
									"postman.setEnvironmentVariable(\"volume\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['Volume']);\r",
									"\r",
									"//article Pages\r",
									"postman.setEnvironmentVariable(\"pages\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['Pages']);\r",
									"\r",
									"//article Authors\r",
									"postman.setEnvironmentVariable(\"authors\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['Authors']);\r",
									"\r",
									"//article PublicationDate\r",
									"postman.setEnvironmentVariable(\"publicationDate\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['PublicationDate']);\r",
									"\r",
									"//article ContentId\r",
									"postman.setEnvironmentVariable(\"contentId\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['ContentId']);\r",
									"\r",
									"\r",
									"//get journal/publication details\r",
									"postman.setEnvironmentVariable(\"publicationId\", jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['PartOfContentId']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{soapApiToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleAuthorSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <Author>Smith</Author>\n            <StartYear>2000</StartYear>\n            <EndYear>2021</EndYear>\n            <MaxCount>1</MaxCount>\n        </DoArticleAuthorSearch>\n    </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "0.9. Add document with PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Response message\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"    pm.expect(jsonData.result.libraryDocumentId).to.exist;\r",
									"});\r",
									"\r",
									"postman.setEnvironmentVariable(\"libraryDocument\", jsonData.result.libraryDocumentId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "RFE-User-Identity",
								"value": "{{userEmail}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Test document\",\r\n  \"contentType\": \"pdf\",\r\n  \"documentContents\": \"\",\r\n    \"contentId\": {{contentId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/Library/documents",
							"host": [
								"{{host}}"
							],
							"path": [
								"Library",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Soap API Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//soapApiToken\r",
									"var jsonObject = xml2Json(responseBody);\r",
									"postman.setEnvironmentVariable(\"soapApiToken\", jsonObject['soap:Envelope']['soap:Body']['LoginResponse']['LoginResult']['Ticket']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <Login xmlns=\"https://www.contentscm.com/\">\n      <UserName>{{userEmail}}</UserName>\n      <Password>{{password}}</Password>\n    </Login>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/auth/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"auth",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "0.7. Get publication details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var jsonObject = xml2Json(responseBody);\r",
									"console.log(jsonObject);\r",
									"\r",
									"//get journal/publication details\r",
									"postman.setEnvironmentVariable(\"publicationStdNum\", jsonObject['soap:Envelope']['soap:Body']['GetPublicationsByPubIdResponse']['GetPublicationsByPubIdResult']['SearchMatches']['SearchMatch']['Citation']['StandardNum']);\r",
									"postman.setEnvironmentVariable(\"publicationDOI\", jsonObject['soap:Envelope']['soap:Body']['GetPublicationsByPubIdResponse']['GetPublicationsByPubIdResult']['SearchMatches']['SearchMatch']['Citation']['DOI']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetPublicationsByPubId xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <PublicationId>{{publicationId}}</PublicationId>\n    </GetPublicationsByPubId>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "1. Search",
			"item": [
				{
					"name": "1.1. DoArticleAuthorSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleAuthorSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <Author>Smith</Author>\n            <StartYear>2000</StartYear>\n            <EndYear>2021</EndYear>\n            <MaxCount>1</MaxCount>\n        </DoArticleAuthorSearch>\n    </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2. DoArticleReferenceSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>{{publicationDate}}</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3. GetAbstract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <GetAbstract xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <ContentId>24265755</ContentId>\n        </GetAbstract>\n    </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4. GetArticlesByAlternateId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetArticlesByAlternateId xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <AltId>23150818</AltId>\n    </GetArticlesByAlternateId>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5. GetArticlesByArticleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetArticlesByArticleId xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <ArticleId>{{contentId}}</ArticleId>\n    </GetArticlesByArticleId>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6. GetArticlesByDOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetArticlesByDOI xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <DOI>{{doi}}</DOI>\n    </GetArticlesByDOI>\n  </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7. GetArticlesByKeyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetArticlesByKeyword xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Keywords>human</Keywords>\n      <SearchType>Any</SearchType>\n    </GetArticlesByKeyword>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.8. GetArticlesByTitle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetArticlesByTitle xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Title>{{title}}</Title>\n      <Exact>true</Exact>\n    </GetArticlesByTitle>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.9. GetContentByContentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetContentByContentId xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <ContentId>{{contentId}}</ContentId>\n    </GetContentByContentId>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.10. GetPublicationsByDOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetPublicationsByDOI xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <DOI>10.1016/0014-2999(95)00185-N</DOI>\n    </GetPublicationsByDOI>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.11. GetPublicationsByKeyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetPublicationsByKeyword xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Keywords>Human</Keywords>\n      <SearchType>Any</SearchType>\n    </GetPublicationsByKeyword>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.12. GetPublicationsByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetPublicationsByName xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Name>{{publicationName}}</Name>\n      <Exact>true</Exact>\n    </GetPublicationsByName>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.13. GetPublicationsByPubId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetPublicationsByPubId xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <PublicationId>{{publicationId}}</PublicationId>\n    </GetPublicationsByPubId>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.14. GetPublicationsByStdNum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetPublicationsByStdNum xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <StdNum>{{publicationStdNum}}</StdNum>\n    </GetPublicationsByStdNum>\n  </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/search.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"search.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Table of Contents",
			"item": [
				{
					"name": "2.1. GetTOCArticles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetTOCArticles xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <PublicationId>17838</PublicationId>\n      <Year>2020</Year>\n      <Volume>577</Volume>\n      <Issue>7788</Issue>\n      <StartIndex>1</StartIndex>\n      <Count>10</Count>\n    </GetTOCArticles>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/toc.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"toc.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2. GetTOCIssues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetTOCIssues xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <PublicationId>17838</PublicationId>\n      <Year>2020</Year>\n      <Volume>577</Volume>\n    </GetTOCIssues>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/toc.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"toc.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3. GetTOCVolumes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetTOCVolumes xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <PublicationId>17838</PublicationId>\n      <Year>2020</Year>\n    </GetTOCVolumes>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/toc.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"toc.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4. GetTOCYears",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetTOCYears xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <PublicationId>17838</PublicationId>\n    </GetTOCYears>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/toc.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"toc.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Rights",
			"item": [
				{
					"name": "3.1. GetRights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetRights xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <RightsRequests>\n        <RightsRequest>\n          <Ordinal>-32768</Ordinal>\n          <UserEmail>{{userEmail}}</UserEmail>\n          <ContentId>{{contentId}}</ContentId>\n          <PublicationId>{{publicationId}}</PublicationId>\n          <ArticleId>{{contentId}}</ArticleId>\n          <InternalOnly>true</InternalOnly>\n          <PermissionsOnly>true</PermissionsOnly>\n        </RightsRequest>\n      </RightsRequests>\n    </GetRights>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/rights.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"rights.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2. GetRightsAliases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetRightsAliases xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n    </GetRightsAliases>\n  </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/rights.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"rights.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3. GetRightsAliasesForUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetRightsAliasesForUser xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <userEmail>{{userEmailNumber}}</userEmail>\n    </GetRightsAliasesForUser>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/rights.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"rights.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4. RegisterUsages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <RegisterUsages xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Usages>\n        <UsageDescription>\n          <Ordinal>-32768</Ordinal>\n          <UserEmail>{{userEmail}}</UserEmail>\n          <ContentId>{{contentId}}</ContentId>\n          <PublicationId>{{publicationId}}</PublicationId>\n          <ArticleId>{{contentId}}</ArticleId>\n          <UseId>{{useId}}</UseId>\n          <Copies>1</Copies>\n          <LocationOverride></LocationOverride>\n          <Description>place your string value here</Description>\n          <ReferenceNum>place your string value here</ReferenceNum>\n          <CostCenter>place your string value here</CostCenter>\n          <PO>place your string value here</PO>\n          <CustOrderNum>place your string value here</CustOrderNum>\n        </UsageDescription>\n      </Usages>\n    </RegisterUsages>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/rights.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"rights.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Request/Order",
			"item": [
				{
					"name": "4.11. PlaceOrders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"//Get Order Id\r",
									"var jsonObject = xml2Json(responseBody);\r",
									"console.log(jsonObject);\r",
									"postman.setEnvironmentVariable(\"orderId\", jsonObject['soap:Envelope']['soap:Body']['PlaceOrdersResponse']['PlaceOrdersResult']['OrderResults']['OrderResult']['OrderId']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PlaceOrders xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Orders>\n        <Order>\n          <Ordinal>1</Ordinal>\n          <QuoteOnly>false</QuoteOnly>\n          <AllowSpecialOrder>false</AllowSpecialOrder>\n          <UserEmail>{{userEmail}}</UserEmail>\n          <OrderItemType>JournalArticle</OrderItemType>\n          <ArticleId>{{contentId}}</ArticleId>\n          <PublicationId>{{publicationId}}</PublicationId>\n          <ContentId>{{contentId}}</ContentId>\n          <Copies>1</Copies>\n          <UseId>{{useId}}</UseId>\n          <SpecInstruct>None</SpecInstruct>\n          <Possession>Unknown</Possession>\n          <Urgency>Normal</Urgency>\n          <BillRef>string</BillRef>\n          <CostCenter>string</CostCenter>\n          <PO>string</PO>\n          <CustOrderNum>string</CustOrderNum>\n          <Source>string</Source>\n          <PriceLimit>100</PriceLimit>\n          <Expiration>2025</Expiration>\n          <RequestedFixedPrice>0</RequestedFixedPrice>\n          <RequestedFixedPriceCurrency>usd</RequestedFixedPriceCurrency>\n        </Order>\n      </Orders>\n    </PlaceOrders>\n  </soap12:Body>\n</soap12:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.1. CancelOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CancelOrder xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <InfotrieveOrderId>{{orderId}}</InfotrieveOrderId>\n    </CancelOrder>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2. CancelOrderFromCustomerBillRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CancelOrderFromCustomerBillRef xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <BillRef>string</BillRef>\n    </CancelOrderFromCustomerBillRef>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3. CancelOrderFromCustomerOrderNum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CancelOrderFromCustomerOrderNum xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <CustOrderNum>string</CustOrderNum>\n    </CancelOrderFromCustomerOrderNum>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.4. GetOrderDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetOrderDetail xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <OrderId>{{orderId}}</OrderId>\n    </GetOrderDetail>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.5. GetOrderDetailByDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetOrderDetailByDate xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <StartDate>2021-06-01</StartDate>\n      <EndDate>2021-06-01</EndDate>\n    </GetOrderDetailByDate>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.6. GetOrderStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetOrderStatus xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <InfotrieveOrderId>{{orderId}}</InfotrieveOrderId>\n    </GetOrderStatus>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.7. GetOrderStatusByDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetOrderStatusByDate xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <StartDate>2021-06-01</StartDate>\n      <EndDate>2021-06-02</EndDate>\n    </GetOrderStatusByDate>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.8. GetOrderStatusFromCustomerBillRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetOrderStatusFromCustomerBillRef xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <BillRef>test</BillRef>\n    </GetOrderStatusFromCustomerBillRef>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.9. GetOrderStatusFromCustomerOrderNum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetOrderStatusFromCustomerOrderNum xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <CustOrderNum>test</CustOrderNum>\n    </GetOrderStatusFromCustomerOrderNum>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.10. GetSources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetSources xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <UserEmailOrCustomId>{{userEmail}}</UserEmailOrCustomId>\n      <UseId>{{useId}}</UseId>\n      <ArticleId>{{contentId}}</ArticleId>\n      <PublicationId>{{publicationId}}</PublicationId>\n      <ContentId>{{contentId}}</ContentId>\n      <Citation>\n        <Genre>article</Genre>\n        <StandardNum>{{publicationStdNum}}</StandardNum>\n        <DOI>{{doi}}</DOI>\n        <PMID>string</PMID>\n        <Title>{{title}}</Title>\n        <PublicationName>{{publicationName}}</PublicationName>\n        <Volume>{{volume}}</Volume>\n        <Issue>1</Issue>\n        <Pages>{{pages}}</Pages>\n        <Authors>{{authors}}</Authors>\n        <Publisher>string</Publisher>\n        <PublicationDate>{{publicationDate}}</PublicationDate>\n        <SupplementOrChapter>string</SupplementOrChapter>\n      </Citation>\n    </GetSources>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/order.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"order.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. User",
			"item": [
				{
					"name": "5.1. AddOrUpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <AddOrUpdateUser xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>SOAP_user@copyright.com</Email>\n      <FriendlyName>SOAP_user</FriendlyName>\n      <State>CA</State>\n      <Country>US</Country>\n      <DivisionName><![CDATA[{{divisionName}}]]></DivisionName>\n      <DepartmentName>{{departmentName}}</DepartmentName>\n      <LocationName>{{locationName}}</LocationName>\n      <ViewName>Administrator</ViewName>\n      <CustOrderNumEditable>true</CustOrderNumEditable>\n      <AllowUpdate>true</AllowUpdate>\n    </AddOrUpdateUser>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.5. EnableUserCredit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <EnableUserCredit xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>{{userEmail}}</Email>\n      <AvailableTime>2021-10-01</AvailableTime>\n    </EnableUserCredit>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.8. SetUserCredit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <SetUserCredit xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>{{userEmail}}</Email>\n      <CreditAmount>100</CreditAmount>\n      <CurrencyCode>USD</CurrencyCode>\n    </SetUserCredit>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2. AdjustUserCredit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <AdjustUserCredit xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>{{userEmail}}</Email>\n      <AdjustmentAmount>100</AdjustmentAmount>\n      <CurrencyCode>USD</CurrencyCode>\n    </AdjustUserCredit>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.3. DeleteUserByEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <DeleteUserByEmail xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>place your string value here</Email>\n    </DeleteUserByEmail>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.4. DisableUserCredit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <DisableUserCredit xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>{{userEmail}}</Email>\n    </DisableUserCredit>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.6. GetUserInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetUserInfo xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <EmailPrefix>{{userEmail}}</EmailPrefix>\n    </GetUserInfo>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.7. GetUserStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetUserStatus xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <EmailPrefix>{{userEmail}}</EmailPrefix>\n    </GetUserStatus>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.9. ValidateUserByEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <ValidateUserByEmail xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Email>{{userEmail}}</Email>\n    </ValidateUserByEmail>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/user.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"user.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Library",
			"item": [
				{
					"name": "6.1. AddDocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <AddDocument xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <UserId>{{userId}}</UserId>\n      <Document>\n        <Type>Article</Type>\n        <Title>Title</Title>\n        <ContentType>string</ContentType>\n        <DocLink>string</DocLink>\n        <InfoLink>string</InfoLink>\n        <Tags>\n          <string>string</string>\n          <string>string</string>\n        </Tags>\n        <PublicationId>{{publicationId}}</PublicationId>\n        <ArticleId>{{contentId}}</ArticleId>\n        <ContentId>{{contentId}}</ContentId>\n        <LibraryId>0</LibraryId>\n        <CopyrightType>Unknown</CopyrightType>\n      </Document>\n    </AddDocument>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Library.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Library.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2. AddUnresolvedDocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <AddUnresolvedDocument xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <UserId>{{userId}}</UserId>\n      <Document>\n        <Title>string</Title>\n        <ContentType>string</ContentType>\n        <LibraryId>0</LibraryId>\n        <CopyrightType>Unknown</CopyrightType>\n      </Document>\n    </AddUnresolvedDocument>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Library.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Library.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.4. GetArticleHoldingCollections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetArticleHoldingCollections xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <OnBehalfOfUserId>{{userId}}</OnBehalfOfUserId>\n    </GetArticleHoldingCollections>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Library.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Library.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.5. GetDocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <GetDocument xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <LibraryDocumentId>{{libraryDocument}}</LibraryDocumentId>\n    </GetDocument>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Library.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Library.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.6. GetDocumentInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <GetDocumentInfo xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <OnBehalfOfUserId>{{userId}}</OnBehalfOfUserId>\n            <InfoRequired>Basic</InfoRequired>\n            <Sort>Title</Sort>\n            <SortDirection>Asc</SortDirection>\n            <Page>1</Page>\n            <PageSize>10</PageSize>\n            <Filters>\n                <OwnerId>{{userId}}</OwnerId>\n                <SearchBlocks>\n                    <ContentSearchBlock>\n                        <Type>FreeText</Type>\n                        <Text></Text>\n                        <OpType>Unknown</OpType>\n                    </ContentSearchBlock>\n                </SearchBlocks>\n            </Filters>\n        </GetDocumentInfo>\n    </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Library.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Library.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3. DeleteDocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <DeleteDocument xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <UserId>{{userId}}</UserId>\n      <LibraryDocumentId>{{libraryDocument}}</LibraryDocumentId>\n    </DeleteDocument>\n  </soap:Body>\n</soap:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Library.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Library.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. PartnerOperations",
			"item": [
				{
					"name": "7.1. RegisterPLEResponse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <RegisterPLEResponse xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <OrderId>-2147483648</OrderId>\n      <Cancel>true</Cancel>\n      <SendNotifications>true</SendNotifications>\n    </RegisterPLEResponse>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.2. RegisterPLEResponseByBillRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <RegisterPLEResponseByBillRef xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <BillRef>place your string value here</BillRef>\n      <Cancel>true</Cancel>\n      <SendNotifications>true</SendNotifications>\n    </RegisterPLEResponseByBillRef>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.3. RegisterPLEResponseByPO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <RegisterPLEResponseByPO xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <PO>place your string value here</PO>\n      <Cancel>true</Cancel>\n      <SendNotifications>true</SendNotifications>\n    </RegisterPLEResponseByPO>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.4. RegisterPLEResponseByCostCenter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <RegisterPLEResponseByCostCenter xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <CostCenter>place your string value here</CostCenter>\n      <Cancel>true</Cancel>\n      <SendNotifications>true</SendNotifications>\n    </RegisterPLEResponseByCostCenter>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.5. RegisterPLEResponseByCustOrderNum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <RegisterPLEResponseByCustOrderNum xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <CustOrderNum>place your string value here</CustOrderNum>\n      <Cancel>true</Cancel>\n      <SendNotifications>true</SendNotifications>\n    </RegisterPLEResponseByCustOrderNum>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.6. GetConfigSettingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetConfigSettingById xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <SettingId>-2147483648</SettingId>\n    </GetConfigSettingById>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.7. GetConfigSetting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetConfigSetting xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n    </GetConfigSetting>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.8. GetConfigSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetConfigSettings xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <ClientId>{{clientId}}</ClientId>\n      <DivisionId>{{divisionId}}</DivisionId>\n      <DepartmentId>{{departmentId}}</DepartmentId>\n      <LocationId>{{locationId}}</LocationId>\n      <ViewId>1056108</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n    </GetConfigSettings>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.9. GetConfigSettingsExt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetConfigSettingsExt xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <CategoriesAndTypes>\n      </CategoriesAndTypes>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n    </GetConfigSettingsExt>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.10. GetVersionStatusById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetVersionStatusById xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <SettingId>-2147483648</SettingId>\n    </GetVersionStatusById>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.11. GetVersionStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetVersionStatus xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n    </GetVersionStatus>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.12. GetVersionStatuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <GetVersionStatuses xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n    </GetVersionStatuses>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.13. EnableConfigSettingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <EnableConfigSettingById xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <SettingId>-2147483648</SettingId>\n      <Enable>true</Enable>\n    </EnableConfigSettingById>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.14. EnableConfigSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <EnableConfigSettings xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n      <Enable>true</Enable>\n    </EnableConfigSettings>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.15. SetConfigSettingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <SetConfigSettingById xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <SettingId>-2147483648</SettingId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n      <Value>place your string value here</Value>\n      <ValueType>place your string value here</ValueType>\n      <Description>place your string value here</Description>\n    </SetConfigSettingById>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.16. SetFileConfigSettingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <SetFileConfigSettingById xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <SettingId>-2147483648</SettingId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n      <FileName>place your string value here</FileName>\n      <FileContents>place your string value here</FileContents>\n      <Description>place your string value here</Description>\n    </SetFileConfigSettingById>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.17. SetConfigSetting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <SetConfigSetting xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n      <Value>place your string value here</Value>\n      <ValueType>place your string value here</ValueType>\n      <Description>place your string value here</Description>\n    </SetConfigSetting>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.18. SetFileConfigSetting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <SetFileConfigSetting xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n      <FileName>place your string value here</FileName>\n      <FileContents>place your string value here</FileContents>\n      <Description>place your string value here</Description>\n    </SetFileConfigSetting>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.19. DeleteConfigSettingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <DeleteConfigSettingById xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <SettingId>-2147483648</SettingId>\n    </DeleteConfigSettingById>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.20. DeleteConfigSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <DeleteConfigSettings xmlns=\"https://www.contentscm.com/\">\n      <PartnerId>-2147483648</PartnerId>\n      <Name>place your string value here</Name>\n      <ClientId>-2147483648</ClientId>\n      <DivisionId>-2147483648</DivisionId>\n      <DepartmentId>-2147483648</DepartmentId>\n      <LocationId>-2147483648</LocationId>\n      <ViewId>-2147483648</ViewId>\n      <Category>place your string value here</Category>\n      <Type>place your string value here</Type>\n      <CultureId>-2147483648</CultureId>\n      <Version>1</Version>\n    </DeleteConfigSettings>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/PartnerOperations.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"PartnerOperations.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8. Sourcing",
			"item": [
				{
					"name": "8.1. PlaceImmediateOrders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PlaceImmediateOrders xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <Orders>\n        <ImmediateOrder>\n          <Ordinal>-2147483235</Ordinal>\n          <InternalOrderNumber>{{orderId}}</InternalOrderNumber>\n          <UserEmail>{{userEmail}}</UserEmail>\n          <PublicationId>{{publicationId}}</PublicationId>\n          <ArticleId>{{contentId}}</ArticleId>\n          <ContentId>{{contentId}}</ContentId>\n          <PartOfContentId>{{publicationId}}</PartOfContentId>\n          <PriceLimit>100</PriceLimit>\n        </ImmediateOrder>\n      </Orders>\n    </PlaceImmediateOrders>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Sourcing.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Sourcing.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9. Tax",
			"item": [
				{
					"name": "9.1. CalculateTaxUSD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <CalculateTaxUSD xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <FeeCR>1</FeeCR>\n      <FeeTransaction>1</FeeTransaction>\n      <FeeDelivery>1</FeeDelivery>\n      <FeeOther>1</FeeOther>\n      <ElectronicDelivery>true</ElectronicDelivery>\n      <TaxCategory>Unknown</TaxCategory>\n      <State>CA</State>\n      <PostalCode>d54645</PostalCode>\n      <Country>US</Country>\n    </CalculateTaxUSD>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Tax.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Tax.asmx"
							]
						}
					},
					"response": []
				},
				{
					"name": "9.2. CalculateTax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <CalculateTax xmlns=\"https://www.contentscm.com/\">\n      <ClientId>{{clientId}}</ClientId>\n      <FeeCR>1</FeeCR>\n      <FeeTransaction>1</FeeTransaction>\n      <FeeDelivery>1</FeeDelivery>\n      <FeeOther>1</FeeOther>\n      <ISOCurrencyCodeIn>place your string value here</ISOCurrencyCodeIn>\n      <ISOCurrencyCodeOut>place your string value here</ISOCurrencyCodeOut>\n      <ConversionDate>2020-08-05T23:16:44</ConversionDate>\n      <ElectronicDelivery>true</ElectronicDelivery>\n      <TaxCategory>Unknown</TaxCategory>\n      <State>place your string value here</State>\n      <PostalCode>place your string value here</PostalCode>\n      <Country>place your string value here</Country>\n    </CalculateTax>\n  </soap12:Body>\n</soap12:Envelope>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{soapHost}}/services/Tax.asmx",
							"host": [
								"{{soapHost}}"
							],
							"path": [
								"services",
								"Tax.asmx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RFE-7358",
			"item": [
				{
					"name": "DoArticleAuthorSearch",
					"item": [
						{
							"name": "Accepted Year Values",
							"item": [
								{
									"name": "1. StartYear/EndYear = 1400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleAuthorSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <Author>Smith</Author>\n            <StartYear>1400</StartYear>\n            <EndYear>1400</EndYear>\n            <MaxCount>1</MaxCount>\n        </DoArticleAuthorSearch>\n    </soap12:Body>\n</soap12:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{soapHost}}/services/search.asmx",
											"host": [
												"{{soapHost}}"
											],
											"path": [
												"services",
												"search.asmx"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. StartYear/EndYear > 1400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleAuthorSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <Author>Smith</Author>\n            <StartYear>1401</StartYear>\n            <EndYear>2028</EndYear>\n            <MaxCount>1</MaxCount>\n        </DoArticleAuthorSearch>\n    </soap12:Body>\n</soap12:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{soapHost}}/services/search.asmx",
											"host": [
												"{{soapHost}}"
											],
											"path": [
												"services",
												"search.asmx"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. StartYear/EndYear = 9999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Publication Date is 'prepub'\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    \r",
													"    pm.expect(jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['SearchMatches']['SearchMatch']['Citation']['PublicationDate']).to.eql('prepub');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleAuthorSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <Author>Smith</Author>\n            <StartYear>9999</StartYear>\n            <EndYear>9999</EndYear>\n            <MaxCount>1</MaxCount>\n        </DoArticleAuthorSearch>\n    </soap12:Body>\n</soap12:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{soapHost}}/services/search.asmx",
											"host": [
												"{{soapHost}}"
											],
											"path": [
												"services",
												"search.asmx"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"pm.test(\"Dates are accepted\", function () {",
											"    //pm.expect(jsonData.value).to.eql(100);",
											"    pm.expect(jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['ResultCode']).to.eql('Success');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Rejected Year Values",
							"item": [
								{
									"name": "4. StartYear/EndYear < 1400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleAuthorSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <Author>Smith</Author>\n            <StartYear>1398</StartYear>\n            <EndYear>1399</EndYear>\n            <MaxCount>1</MaxCount>\n        </DoArticleAuthorSearch>\n    </soap12:Body>\n</soap12:Envelope>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{soapHost}}/services/search.asmx",
											"host": [
												"{{soapHost}}"
											],
											"path": [
												"services",
												"search.asmx"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"pm.test(\"Dates are rejected\", function () {",
											"",
											"    //pm.expect(jsonData.value).to.eql(100);",
											"    pm.expect(jsonObject['soap:Envelope']['soap:Body']['DoArticleAuthorSearchResponse']['DoArticleAuthorSearchResult']['ResultCode']).to.eql('InvalidParameter');",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					]
				},
				{
					"name": "DoArticleReferenceSearch",
					"item": [
						{
							"name": "1. PubDate < 1400 (YYYY)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>1399</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. PubDate < 1400 (mm/YYYY)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>12/1399</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. PubDate < 1400 (mm/dd/YYYY)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>12/31/1399</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. PubDate >= 1400 (YYYY)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>1400</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. PubDate >= 1400 (mm/YYYY)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>12/1401</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. PubDate >= 1400 (mm/dd/YYYY)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>02/12/2022</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. PubDate = (current_year + 5)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>04/18/2028</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. PubDate = 9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>9999</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. PubDate = 12/9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>{{publicationDate}}</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. PubDate = 12/31/9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap12:Body>\n        <DoArticleReferenceSearch xmlns=\"https://www.contentscm.com/\">\n            <ClientId>{{clientId}}</ClientId>\n            <PubStdNum>{{publicationStdNum}}</PubStdNum>\n            <PubName>{{publicationName}}</PubName>\n            <PubDate>{{publicationDate}}</PubDate>\n            <ArticleDOI>{{doi}}</ArticleDOI>\n            <ArticleTitle>{{title}}</ArticleTitle>\n            <Volume>{{volume}}</Volume>\n            <Issue>1</Issue>\n            <Pages>{{pages}}</Pages>\n            <Author>{{authors}}</Author>\n            <ExpandedSearch>true</ExpandedSearch>\n        </DoArticleReferenceSearch>\n    </soap12:Body>\n</soap12:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{soapHost}}/services/search.asmx",
									"host": [
										"{{soapHost}}"
									],
									"path": [
										"services",
										"search.asmx"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"pm.test(\"PubDate is accepted\", function () {",
									"    //pm.expect(jsonData.value).to.eql(100);",
									"    pm.expect(jsonObject['soap:Envelope']['soap:Body']['DoArticleReferenceSearchResponse']['DoArticleReferenceSearchResult']['ResultCode']).to.eql('Success');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}